Clean up how umasks work.  We now default to using the UMASK value from
/etc/login.defs on the user's home directory (it's still overridden at
the command line), but now we make sure that any intermediate directories
we create continue to have the execute bit set so that affected users can
always get to their own home directories.

diff --git a/src/mkhomedir.c b/src/mkhomedir.c
index b8a5a06..98ce45b 100644
--- a/src/mkhomedir.c
+++ b/src/mkhomedir.c
@@ -1,5 +1,5 @@
 /*
-   Copyright 2005,2006,2007 Red Hat, Inc.
+   Copyright 2005,2006,2007,2011 Red Hat, Inc.
    All rights reserved.
 
    Redistribution and use in source and binary forms, with or without
@@ -243,14 +243,52 @@ mkhomedir(const char *user, int flags)
 	return 0;
 }
 
+static mode_t
+get_umask(int *configured)
+{
+	FILE *fp;
+	char buf[BUFSIZ], *p, *end;
+	mode_t mask = umask(0777);
+	long tmp;
+
+	fp = fopen("/etc/login.defs", "r");
+	if (fp != NULL) {
+		while (fgets(buf, sizeof(buf), fp) != NULL) {
+			if (buf[0] == '#') {
+				continue;
+			}
+			buf[strcspn(buf, "\r\n")] = '\0';
+			p = buf + strspn(buf, " \t");
+			if (strncmp(p, "UMASK", 5) != 0) {
+				continue;
+			}
+			p += 5;
+			if (strspn(p, " \t") == 0) {
+				continue;
+			}
+			p += strspn(p, " \t");
+			tmp = strtol(p, &end, 0);
+			if ((end != NULL) && (*end == '\0')) {
+				mask = tmp;
+				if (configured) {
+					*configured = 1;
+				}
+				break;
+			}
+		}
+		fclose(fp);
+	}
+	return mask;
+}
+
 int
 main(int argc, char **argv)
 {
 	char **args, *p;
-	int i, flags = FLAG_POPULATE;
+	int i, configured_umask = 0, flags = FLAG_POPULATE;
 
 	openlog(PACKAGE "-mkhomedir", LOG_PID, LOG_DAEMON);
-	override_umask = umask(0777);
+	override_umask = get_umask(&configured_umask);
 	umask(override_umask);
 	skel_dir = "/etc/skel";
 
@@ -272,6 +310,7 @@ main(int argc, char **argv)
 					optarg);
 				return 1;
 			}
+			configured_umask = 0;
 			break;
 		default:
 			fprintf(stderr, "Valid options:\n"
@@ -281,8 +320,11 @@ main(int argc, char **argv)
 				"a directory.\n"
 				"-s PATH\tOverride the skeleton directory "
 				"path (\"%s\").\n"
-				"-u MASK\tOverride the default umask (0%03o).\n",
-				skel_dir, override_umask);
+				"-u MASK\tOverride the default umask (0%03o%s).\n",
+				skel_dir, override_umask,
+				configured_umask ?
+				", from /etc/login.defs" :
+				"");
 			return 1;
 		}
 	}
diff --git a/src/selinux.c b/src/selinux.c
index bf46883..d2482cf 100644
--- a/src/selinux.c
+++ b/src/selinux.c
@@ -124,6 +124,7 @@ oddjob_selinux_mkdir(const char *newpath, mode_t mode, uid_t uid, gid_t gid)
 	char *q;
 	int i;
 	struct stat st;
+	mode_t stored_umask, perms;
 
 	/* Collapse instances of "//" to "/". */
 	if (strlen(newpath) < sizeof(tmp)) {
@@ -156,7 +157,10 @@ oddjob_selinux_mkdir(const char *newpath, mode_t mode, uid_t uid, gid_t gid)
 									 S_IXGRP |
 									 S_IXOTH |
 									 S_IFDIR);
-				i = mkdir(path, S_IRWXU | S_IXGRP | S_IXOTH);
+				perms = S_IRWXU | S_IXGRP | S_IXOTH;
+				stored_umask = umask(~perms);
+				i = mkdir(path, perms);
+				umask(stored_umask);
 				oddjob_unset_selinux_file_creation_context();
 				if ((i == -1) && (errno != EEXIST)) {
 					syslog(LOG_ERR, "error creating %s: %m",
